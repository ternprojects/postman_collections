{
	"info": {
		"_postman_id": "2817c522-3e08-484b-bef1-2d7c5d5fb760",
		"name": "SrarWars (Udemy)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7660626"
	},
	"item": [
		{
			"name": "Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"Correct response JSON\", function () {\r",
							"    pm.response.to.have.jsonBody()\r",
							"})\r",
							"\r",
							"//2. We have all the declared fields in the response\r",
							"pm.test(\"Check that we have all declared fields\", function () {\r",
							"    const jsonData = pm.response.json()\r",
							"    pm.expect(jsonData).to.have.property(\"people\")\r",
							"    pm.expect(jsonData).to.have.property(\"planets\")\r",
							"    pm.expect(jsonData).to.have.property(\"films\")\r",
							"    pm.expect(jsonData).to.have.property(\"species\")\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\")\r",
							"    pm.expect(jsonData).to.have.property(\"starships\")\r",
							"})\r",
							"\r",
							"//3. Field value isn't NULL\r",
							"pm.test(\"Check if value isn't NULL\", function () {\r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.people).not.equal(null)\r",
							"    pm.expect(jsonData.planets).not.equal(null)\r",
							"    pm.expect(jsonData.films).not.equal(null)\r",
							"    pm.expect(jsonData.species).not.equal(null)\r",
							"    pm.expect(jsonData.vehicles).not.equal(null)\r",
							"    pm.expect(jsonData.starships).not.equal(null)\r",
							"})\r",
							"\r",
							"//4. Check if value isn't empty\r",
							"pm.test(\"Ceck if value isn't empty\", function () {\r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.people).not.equal(\"\")\r",
							"    pm.expect(jsonData.planets).not.equal()\r",
							"    pm.expect(jsonData.films).not.equal(\"\")\r",
							"    pm.expect(jsonData.species).not.equal(\"\")\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\")\r",
							"    pm.expect(jsonData.starships).not.equal(\"\")\r",
							"})\r",
							"\r",
							"//5. Check if field corresponds to a specific value\r",
							"pm.test(\"Check if field corresponds to a specific value\", function () {\r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\")\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\")\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\")\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\")\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\")\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\")\r",
							"})\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"//7. Status message is ok\r",
							"pm.test(\"Status message is ok\", function () {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"})\r",
							"\r",
							"//8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500)\r",
							"})\r",
							"\r",
							"//9. There is a specific header in the response\r",
							"pm.test(\"There is a specific header in the response\", function () {\r",
							"    pm.response.to.have.header(\"Content-type\")\r",
							"})\r",
							"\r",
							"//10. The response has a specific header with a specific value\r",
							"pm.test(\"The response has a specific header with a specific value\", function () {\r",
							"    pm.response.to.be.header(\"Content-type\", \"application/json\")\r",
							"})\r",
							"\r",
							"//11. Cookie exist\r",
							"//Check pass...\r",
							"pm.test(\"Cookie exist\", function () {\r",
							"    pm.cookies.has(\"__cfduid\")\r",
							"})\r",
							"\r",
							"//12. Cookie has value\r",
							"//Check pass...\r",
							"pm.test(\"Cookie has value\", function () {\r",
							"    try {\r",
							"        let MY_COOKIE = pm.cookies.get(\"__cfduid\")\r",
							"        console.log(MY_COOKIE)\r",
							"    } catch (e) {\r",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Json schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let data1 = JSON.parse(responseBody)\r",
							"\r",
							"let schema = {\r",
							"    //Specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    //Specify requires properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    //Describe properties\r",
							"    \"properties\": {\r",
							"        \"people\": { \"type\": \"string\" },\r",
							"        \"planets\": { \"type\": \"string\" },\r",
							"        \"films\": { \"type\": \"string\" },\r",
							"        \"species\": { \"type\": \"starship\" },\r",
							"        \"vehicles\": { \"type\": \"string\" },\r",
							"        \"starships\": { \"type\": \"string\" },\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Body is correct', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Json schema-1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let data1 = JSON.parse(responseBody)\r",
							"\r",
							"let schema = {\r",
							"    //Specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    //Specify requires properties\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    //Describe properties\r",
							"    \"property\": {\r",
							"        \"name\": { \"type\": \"string\" },\r",
							"        \"homeworld\": { \"type\": \"string\" },\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": { \"type\": \"string\" }\r",
							"        },\r",
							"        \"species\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": { \"type\": \"string\" }\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": { \"type\": \"string\" }\r",
							"        },\r",
							"        \"starhips\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": { \"type\": \"string\" }\r",
							"        },\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Body is correct', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		}
	]
}